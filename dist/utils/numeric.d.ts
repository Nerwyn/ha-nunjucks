export declare function isNaNCheck(res: string): void;
export declare function float(value: string, fallback?: string): string | number;
export declare function is_number(value: number): boolean;
export declare function int(value: string, fallback?: string): string | number;
export declare function bool(value: string | number | boolean, fallback?: string): string | boolean;
export declare function log(value: number, base?: number, fallback?: string): string | number;
export declare function sin(value: number, fallback?: string): string | number;
export declare function cos(value: number, fallback?: string): string | number;
export declare function tan(value: number, fallback?: string): string | number;
export declare function asin(value: number, fallback?: string): string | number;
export declare function acos(value: number, fallback?: string): string | number;
export declare function atan(value: number, fallback?: string): string | number;
export declare function atan2(y: number, x: number, fallback?: string): string | number;
export declare function sqrt(value: number, fallback?: string): string | number;
export declare function max(...args: number[]): number;
export declare function min(...args: number[]): number;
export declare function average(values: number[], fallback?: string): string | number;
export declare function median(values: number[], fallback?: string): string | number;
export declare function statistical_mode(values: number[], fallback?: string): string | number;
export declare const e: number;
export declare const pi: number;
export declare const tau: number;
export declare const inf: number;
export declare function bitwise_and(value_one: number, value_two: number): void;
export declare function bitwise_or(value_one: number, value_two: number): void;
export declare function bitwise_xor(value_one: number, value_two: number): void;
export declare function ord(value: string): void;
export declare function multiply(value: string, arg: number): void;
export declare function add(value: string, arg: number): void;
